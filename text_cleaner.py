#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
文本清理模块
用于清理文本中的表情符号、特殊符号等不适合朗读的内容
"""

import re
import logging

class TextCleaner:
    """文本清理器"""
    
    def __init__(self):
        # 表情符号正则表达式（更全面的Unicode范围）
        self.emoji_pattern = re.compile(
            "["
            "\U0001F600-\U0001F64F"  # 表情符号
            "\U0001F300-\U0001F5FF"  # 符号和象形文字
            "\U0001F680-\U0001F6FF"  # 交通和地图符号
            "\U0001F1E0-\U0001F1FF"  # 国旗
            "\U00002702-\U000027B0"  # 杂项符号
            "\U000024C2-\U0001F251"  # 其他符号
            "\U0001F900-\U0001F9FF"  # 补充符号和象形文字
            "\U0001FA70-\U0001FAFF"  # 扩展符号A
            "\U00002600-\U000026FF"  # 杂项符号
            "\U00002700-\U000027BF"  # 装饰符号
            "]+",
            flags=re.UNICODE
        )
        
        # 特殊符号和标点符号
        self.special_symbols = {
            # 常见表情符号文本
            '😀': '', '😁': '', '😂': '', '🤣': '', '😃': '', '😄': '', '😅': '', '😆': '',
            '😉': '', '😊': '', '😋': '', '😎': '', '😍': '', '😘': '', '🥰': '', '😗': '',
            '😙': '', '😚': '', '☺️': '', '🙂': '', '🤗': '', '🤩': '', '🤔': '', '🤨': '',
            '😐': '', '😑': '', '😶': '', '🙄': '', '😏': '', '😣': '', '😥': '', '😮': '',
            '🤐': '', '😯': '', '😪': '', '😫': '', '😴': '', '😌': '', '😛': '', '😜': '',
            '😝': '', '🤤': '', '😒': '', '😓': '', '😔': '', '😕': '', '🙃': '', '🤑': '',
            '😲': '', '☹️': '', '🙁': '', '😖': '', '😞': '', '😟': '', '😤': '', '😢': '',
            '😭': '', '😦': '', '😧': '', '😨': '', '😩': '', '🤯': '', '😬': '', '😰': '',
            '😱': '', '🥵': '', '🥶': '', '😳': '', '🤪': '', '😵': '', '😡': '', '😠': '',
            '🤬': '', '😷': '', '🤒': '', '🤕': '', '🤢': '', '🤮': '', '🤧': '', '😇': '',
            '🥳': '', '🥺': '', '🤠': '', '🤡': '', '🤥': '', '🤫': '', '🤭': '', '🧐': '',
            
            # 手势和人物
            '👍': '', '👎': '', '👌': '', '✌️': '', '🤞': '', '🤟': '', '🤘': '', '🤙': '',
            '👈': '', '👉': '', '👆': '', '👇': '', '☝️': '', '✋': '', '🤚': '', '🖐': '',
            '🖖': '', '👋': '', '🤏': '', '💪': '', '🦾': '', '🖕': '', '✍️': '', '🙏': '',
            '🦶': '', '🦵': '', '👂': '', '🦻': '', '👃': '', '🧠': '', '🦷': '', '🦴': '',
            '👀': '', '👁': '', '👅': '', '👄': '', '💋': '', '🩸': '',
            
            # 动物和自然
            '🐶': '', '🐱': '', '🐭': '', '🐹': '', '🐰': '', '🦊': '', '🐻': '', '🐼': '',
            '🐨': '', '🐯': '', '🦁': '', '🐮': '', '🐷': '', '🐽': '', '🐸': '', '🐵': '',
            '🙈': '', '🙉': '', '🙊': '', '🐒': '', '🐔': '', '🐧': '', '🐦': '', '🐤': '',
            '🐣': '', '🐥': '', '🦆': '', '🦅': '', '🦉': '', '🦇': '', '🐺': '', '🐗': '',
            '🐴': '', '🦄': '', '🐝': '', '🐛': '', '🦋': '', '🐌': '', '🐞': '', '🐜': '',
            '🦟': '', '🦗': '', '🕷': '', '🕸': '', '🦂': '', '🐢': '', '🐍': '', '🦎': '',
            '🦖': '', '🦕': '', '🐙': '', '🦑': '', '🦐': '', '🦞': '', '🦀': '', '🐡': '',
            '🐠': '', '🐟': '', '🐬': '', '🐳': '', '🐋': '', '🦈': '', '🐊': '', '🐅': '',
            '🐆': '', '🦓': '', '🦍': '', '🦧': '', '🐘': '', '🦛': '', '🦏': '', '🐪': '',
            '🐫': '', '🦒': '', '🦘': '', '🐃': '', '🐂': '', '🐄': '', '🐎': '', '🐖': '',
            '🐏': '', '🐑': '', '🦙': '', '🐐': '', '🦌': '', '🐕': '', '🐩': '', '🦮': '',
            '🐕‍🦺': '', '🐈': '', '🐓': '', '🦃': '', '🦚': '', '🦜': '', '🦢': '', '🦩': '',
            '🕊': '', '🐇': '', '🦝': '', '🦨': '', '🦡': '', '🦦': '', '🦥': '', '🐁': '',
            '🐀': '', '🐿': '', '🦔': '',
            
            # 食物和饮料
            '🍎': '', '🍐': '', '🍊': '', '🍋': '', '🍌': '', '🍉': '', '🍇': '', '🍓': '',
            '🫐': '', '🍈': '', '🍒': '', '🍑': '', '🥭': '', '🍍': '', '🥥': '', '🥝': '',
            '🍅': '', '🍆': '', '🥑': '', '🥦': '', '🥬': '', '🥒': '', '🌶': '', '🫑': '',
            '🌽': '', '🥕': '', '🫒': '', '🧄': '', '🧅': '', '🥔': '', '🍠': '', '🥐': '',
            '🥯': '', '🍞': '', '🥖': '', '🥨': '', '🧀': '', '🥚': '', '🍳': '', '🧈': '',
            '🥞': '', '🧇': '', '🥓': '', '🥩': '', '🍗': '', '🍖': '', '🦴': '', '🌭': '',
            '🍔': '', '🍟': '', '🍕': '', '🫓': '', '🥙': '', '🌮': '', '🌯': '', '🫔': '',
            '🥗': '', '🥘': '', '🫕': '', '🍝': '', '🍜': '', '🍲': '', '🍛': '', '🍣': '',
            '🍱': '', '🥟': '', '🦪': '', '🍤': '', '🍙': '', '🍚': '', '🍘': '', '🍥': '',
            '🥠': '', '🥮': '', '🍢': '', '🍡': '', '🍧': '', '🍨': '', '🍦': '', '🥧': '',
            '🧁': '', '🍰': '', '🎂': '', '🍮': '', '🍭': '', '🍬': '', '🍫': '', '🍿': '',
            '🍩': '', '🍪': '', '🌰': '', '🥜': '', '🍯': '', '🥛': '', '🍼': '', '☕': '',
            '🍵': '', '🧃': '', '🥤': '', '🍶': '', '🍺': '', '🍻': '', '🥂': '', '🍷': '',
            '🥃': '', '🍸': '', '🍹': '', '🧉': '', '🍾': '',
            
            # 其他常见符号
            '❤️': '', '🧡': '', '💛': '', '💚': '', '💙': '', '💜': '', '🖤': '', '🤍': '',
            '🤎': '', '💔': '', '❣️': '', '💕': '', '💞': '', '💓': '', '💗': '', '💖': '',
            '💘': '', '💝': '', '💟': '', '♥️': '', '💯': '', '💢': '', '💥': '', '💫': '',
            '💦': '', '💨': '', '🕳': '', '💣': '', '💬': '', '👁‍🗨': '', '🗨': '', '🗯': '',
            '💭': '', '💤': '', '👋': '', '🤚': '', '🖐': '', '✋': '', '🖖': '', '👌': '',
            '🤌': '', '🤏': '', '✌️': '', '🤞': '', '🤟': '', '🤘': '', '🤙': '', '👈': '',
            '👉': '', '👆': '', '🖕': '', '👇': '', '☝️': '', '👍': '', '👎': '', '✊': '',
            '👊': '', '🤛': '', '🤜': '', '👏': '', '🙌': '', '👐': '', '🤲': '', '🤝': '',
            '🙏': '', '✍️': '', '💅': '', '🤳': '', '💪': '', '🦾': '', '🦿': '', '🦵': '',
            '🦶': '', '👂': '', '🦻': '', '👃': '', '🧠': '', '🫀': '', '🫁': '', '🦷': '',
            '🦴': '', '👀': '', '👁': '', '👅': '', '👄': '', '💋': '', '🩸': '',
            
            # 箭头和符号
            '→': ' ', '←': ' ', '↑': ' ', '↓': ' ', '↔': ' ', '↕': ' ', '↖': ' ', '↗': ' ',
            '↘': ' ', '↙': ' ', '⤴': ' ', '⤵': ' ', '🔃': ' ', '🔄': ' ', '🔙': ' ', '🔚': ' ',
            '🔛': ' ', '🔜': ' ', '🔝': ' ',
            
            # 数学和特殊符号
            '±': '正负', '×': '乘以', '÷': '除以', '=': '等于', '≠': '不等于', '≈': '约等于',
            '≤': '小于等于', '≥': '大于等于', '<': '小于', '>': '大于', '∞': '无穷大',
            '∑': '求和', '∏': '连乘', '∫': '积分', '∂': '偏微分', '∆': '增量',
            '√': '根号', '∛': '立方根', '∜': '四次方根', '²': '平方', '³': '立方',
            '°': '度', '%': '百分之', '‰': '千分之', '‱': '万分之',
            
            # 货币符号
            '$': '美元', '€': '欧元', '£': '英镑', '¥': '人民币', '₹': '卢比',
            '₽': '卢布', '₩': '韩元', '₪': '谢克尔', '₫': '越南盾',
            
            # 标点符号优化（保留中文标点符号）
            '…': '...', '—': '-', '–': '-', ''': "'", ''': "'", '"': '"', '"': '"',
            '«': '"', '»': '"', '‹': "'", '›': "'", '„': '"', '‚': "'",
            # 注意：不要替换中文标点符号 ，。！？；：
            
            # 其他符号
            '©': '版权', '®': '注册商标', '™': '商标', '§': '章节', '¶': '段落',
            '†': '', '‡': '', '•': '', '‰': '千分之', '′': '分', '″': '秒',
            '‴': '', '※': '', '‼': '!!', '⁇': '??', '⁈': '?!', '⁉': '!?',
            '⁰': '0', '¹': '1', '²': '2', '³': '3', '⁴': '4', '⁵': '5',
            '⁶': '6', '⁷': '7', '⁸': '8', '⁹': '9',
            '₀': '0', '₁': '1', '₂': '2', '₃': '3', '₄': '4', '₅': '5',
            '₆': '6', '₇': '7', '₈': '8', '₉': '9',
            
            # 特殊空格和分隔符
            '\u00A0': ' ',  # 不间断空格
            '\u2000': ' ',  # en quad
            '\u2001': ' ',  # em quad
            '\u2002': ' ',  # en space
            '\u2003': ' ',  # em space
            '\u2004': ' ',  # three-per-em space
            '\u2005': ' ',  # four-per-em space
            '\u2006': ' ',  # six-per-em space
            '\u2007': ' ',  # figure space
            '\u2008': ' ',  # punctuation space
            '\u2009': ' ',  # thin space
            '\u200A': ' ',  # hair space
            '\u200B': '',   # zero width space
            '\u200C': '',   # zero width non-joiner
            '\u200D': '',   # zero width joiner
            '\u2060': '',   # word joiner
            '\uFEFF': '',   # zero width no-break space
        }
        
        # 网址和邮箱正则
        self.url_pattern = re.compile(
            r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        )
        self.email_pattern = re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b')
        
        # 代码块正则（修复多行匹配）
        self.code_block_pattern = re.compile(r'```[\s\S]*?```', re.DOTALL)
        self.inline_code_pattern = re.compile(r'`[^`\n]+`')
        
        # Markdown链接正则
        self.markdown_link_pattern = re.compile(r'\[([^\]]+)\]\([^\)]+\)')
        
        logging.info("文本清理器初始化完成")
    
    def clean_for_tts(self, text: str) -> str:
        """清理文本用于TTS朗读"""
        if not text:
            return ""

        try:
            original_text = text

            # 1. 移除代码块
            text = self.code_block_pattern.sub('', text)
            text = self.inline_code_pattern.sub('', text)

            # 2. 处理Markdown链接，保留链接文本
            text = self.markdown_link_pattern.sub(r'\1', text)

            # 3. 移除网址
            text = self.url_pattern.sub('', text)

            # 4. 移除邮箱
            text = self.email_pattern.sub('', text)

            # 5. 移除表情符号（使用更直接的方法）
            # 先用正则表达式
            text = self.emoji_pattern.sub('', text)

            # 然后用字符替换（确保清理常见表情符号和装饰符号）
            # 表情符号
            emoji_chars = '😀😁😂🤣😃😄😅😆😉😊😋😎😍😘🥰😗😙😚☺️🙂🤗🤩🤔🤨😐😑😶🙄😏😣😥😮🤐😯😪😫😴😌😛😜😝🤤😒😓😔😕🙃🤑😲☹️🙁😖😞😟😤😢😭😦😧😨😩🤯😬😰😱🥵🥶😳🤪😵😡😠🤬😷🤒🤕🤢🤮🤧😇🥳🥺🤠🤡🤥🤫🤭🧐👍👎👌✌️🤞🤟🤘🤙👈👉👆👇☝️✋🤚🖐🖖👋🤏💪🦾🖕✍️🙏🎉💰❤️💯🔥💕💖💗💘💝💞💟💢💤💥💦💨💫💬💭🗯💮'
            for char in emoji_chars:
                text = text.replace(char, '')

            # 装饰性符号和特殊字符
            decorative_chars = '🌟🌸✨～⭐💫⚡🌈🎈🎊🎁🎀🌺🌻🌷🌹🌼🌙☀️⛅🌤️🌦️🌧️⛈️🌩️🌨️❄️☃️⛄🌬️💨🌪️🌫️🌊💧💦☔⚡🔥💥✨⭐🌟💫⭐🌠🌌🌃🌆🌇🌉🌁🏔️⛰️🌋🗻🏕️🏖️🏜️🏝️🏞️🏟️🏛️🏗️🏘️🏚️🏠🏡🏢🏣🏤🏥🏦🏧🏨🏩🏪🏫🏬🏭🏯🏰🗼🗽⛪🕌🛕🕍⛩️🕋⛲⛺🌁🌋🗻🏔️⛰️🌄🌅🌆🌇🌉♨️🎠🎡🎢💈🎪🚂🚃🚄🚅🚆🚇🚈🚉🚊🚝🚞🚋🚌🚍🚎🚐🚑🚒🚓🚔🚕🚖🚗🚘🚙🚚🚛🚜🏎️🏍️🛵🚲🛴🛹🛼🚁🛸🚀✈️🛩️🛫🛬🪂💺🚢⛵🚤🛥️🛳️⛴️🚧⚓⛽🚨🚥🚦🛑🚏⚓⛵🚤🛥️🛳️⛴️🚢🚧⚓⛽🚨🚥🚦🛑🚏'
            for char in decorative_chars:
                text = text.replace(char, '')

            # 特殊符号和波浪线等
            special_symbols = '～〜∼≈≋≅≃≂≡≢≣≤≥≦≧≨≩≪≫≬≭≮≯≰≱≲≳≴≵≶≷≸≹≺≻≼≽≾≿⊀⊁⊂⊃⊄⊅⊆⊇⊈⊉⊊⊋⊌⊍⊎⊏⊐⊑⊒⊓⊔⊕⊖⊗⊘⊙⊚⊛⊜⊝⊞⊟⊠⊡⊢⊣⊤⊥⊦⊧⊨⊩⊪⊫⊬⊭⊮⊯⊰⊱⊲⊳⊴⊵⊶⊷⊸⊹⊺⊻⊼⊽⊾⊿⋀⋁⋂⋃⋄⋅⋆⋇⋈⋉⋊⋋⋌⋍⋎⋏⋐⋑⋒⋓⋔⋕⋖⋗⋘⋙⋚⋛⋜⋝⋞⋟⋠⋡⋢⋣⋤⋥⋦⋧⋨⋩⋪⋫⋬⋭⋮⋯⋰⋱⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻⋼⋽⋾⋿'
            for char in special_symbols:
                text = text.replace(char, '')

            # 箭头符号
            arrow_symbols = '←↑→↓↔↕↖↗↘↙↚↛↜↝↞↟↠↡↢↣↤↥↦↧↨↩↪↫↬↭↮↯↰↱↲↳↴↵↶↷↸↹↺↻↼↽↾↿⇀⇁⇂⇃⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇚⇛⇜⇝⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪⇫⇬⇭⇮⇯⇰⇱⇲⇳⇴⇵⇶⇷⇸⇹⇺⇻⇼⇽⇾⇿'
            for char in arrow_symbols:
                text = text.replace(char, '')

            # 星号和点状符号
            star_symbols = '★☆✦✧✩✪✫✬✭✮✯✰✱✲✳✴✵✶✷✸✹✺✻✼✽✾✿❀❁❂❃❄❅❆❇❈❉❊❋❌❍❎❏❐❑❒❓❔❕❖❗❘❙❚❛❜❝❞❟❠❡❢❣❤❥❦❧❨❩❪❫❬❭❮❯❰❱❲❳❴❵❶❷❸❹❺❻❼❽❾❿➀➁➂➃➄➅➆➇➈➉➊➋➌➍➎➏➐➑➒➓➔➕➖➗➘➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨➩➪➫➬➭➮➯➰➱➲➳➴➵➶➷➸➹➺➻➼➽➾➿'
            for char in star_symbols:
                text = text.replace(char, '')

            # 6. 只替换确实需要替换的特殊符号
            # 货币符号
            currency_symbols = ['$', '€', '£', '¥', '₹', '₽', '₩', '₪', '₫']
            for symbol in currency_symbols:
                if symbol in text:
                    text = text.replace(symbol, self.special_symbols.get(symbol, ''))

            # 数学符号
            math_symbols = ['±', '×', '÷', '≠', '≈', '≤', '≥', '∞', '∑', '∏', '∫', '∂', '∆', '√', '∛', '∜']
            for symbol in math_symbols:
                if symbol in text:
                    text = text.replace(symbol, self.special_symbols.get(symbol, ''))



            # 7. 清理多余的空格
            text = re.sub(r'\s+', ' ', text)
            text = text.strip()

            # 8. 如果清理后文本为空或过短，返回原文本（可能是正常文本）
            if not text.strip() or len(text.strip()) < 3:
                # 检查原文本是否主要是中文或英文
                if re.search(r'[\u4e00-\u9fff\w]', original_text):
                    return original_text.strip()

            return text

        except Exception as e:
            logging.error(f"文本清理失败: {e}")
            return text
    
    def clean_for_display(self, text: str) -> str:
        """清理文本用于显示（保留更多格式）"""
        if not text:
            return ""
        
        try:
            # 只进行基本清理，保留大部分格式
            # 移除零宽字符
            for char in ['\u200B', '\u200C', '\u200D', '\u2060', '\uFEFF']:
                text = text.replace(char, '')
            
            # 标准化空格
            text = re.sub(r'[\u00A0\u2000-\u200A]', ' ', text)
            
            # 清理多余的空格
            text = re.sub(r' +', ' ', text)
            text = text.strip()
            
            return text
            
        except Exception as e:
            logging.error(f"显示文本清理失败: {e}")
            return text
    
    def extract_readable_text(self, text: str) -> str:
        """提取可读文本（用于语音识别结果处理）"""
        if not text:
            return ""
        
        try:
            # 移除表情符号
            text = self.emoji_pattern.sub('', text)
            
            # 基本符号替换
            basic_replacements = {
                '&': '和',
                '@': '在',
                '#': '井号',
                '*': '星号',
                '+': '加',
                '-': '减',
                '/': '斜杠',
                '\\': '反斜杠',
                '|': '竖线',
                '~': '波浪号',
                '^': '上标',
                '_': '下划线',
                '=': '等号',
                '[': '左方括号',
                ']': '右方括号',
                '{': '左大括号',
                '}': '右大括号',
                '(': '左括号',
                ')': '右括号',
                '<': '小于',
                '>': '大于',
            }
            
            for symbol, replacement in basic_replacements.items():
                text = text.replace(symbol, replacement)
            
            # 清理空格
            text = re.sub(r'\s+', ' ', text)
            text = text.strip()
            
            return text
            
        except Exception as e:
            logging.error(f"提取可读文本失败: {e}")
            return text

# 全局文本清理器实例
text_cleaner = TextCleaner()

def get_text_cleaner() -> TextCleaner:
    """获取文本清理器实例"""
    return text_cleaner

def clean_text_for_tts(text: str) -> str:
    """快速清理文本用于TTS"""
    return text_cleaner.clean_for_tts(text)

def clean_text_for_display(text: str) -> str:
    """快速清理文本用于显示"""
    return text_cleaner.clean_for_display(text)
